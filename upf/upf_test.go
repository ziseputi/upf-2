// Copyright 2019-2020 upf authors. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.

package main_test

import (
	"context"
	"net"
	"testing"
	"time"
	"upf/gtp/v1"
)

type testVal struct {
	teidIn, teidOut uint32
	seq             uint16
	payload         []byte
}

func setup(ctx context.Context) (cliConn *v1.UPlaneConn, add *net.UDPAddr, err error) {
	cliAddr, err := net.ResolveUDPAddr("udp", "127.0.0.1:2162")
	if err != nil {
		return nil, nil, err
	}
	srvAddr, err := net.ResolveUDPAddr("udp", "127.0.0.1:2152")
	if err != nil {
		return nil, nil, err
	}

	// XXX - waiting for server to be well-prepared, should consider better way.
	time.Sleep(1 * time.Second)
	cliConn, err = v1.DialUPlane(ctx, cliAddr, srvAddr)
	if err != nil {
		return nil, nil, err
	}

	return cliConn, srvAddr, nil
}

func TestClientWrite(t *testing.T) {
	var (
		okCh  = make(chan struct{})
		errCh = make(chan error)
		//buf   = make([]byte, 2048)
		tv = &testVal{
			0x11111111, 0x22222222, 0x3333,
			httpSyn(),
		}
	)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	cliConn, srvAddr, err := setup(ctx)
	if err != nil {
		t.Fatal(err)
	}

	go func(tv *testVal) {
		//n, addr, teid, err := cliConn.ReadFromGTP(buf)
		//if err != nil {
		//	errCh <- err
		//	return
		//}

		//if diff := cmp.Diff(n, len(tv.payload)); diff != "" {
		//	t.Error(diff)
		//}
		//if diff := cmp.Diff(addr, cliConn.LocalAddr()); diff != "" {
		//	t.Error(diff)
		//}
		//if diff := cmp.Diff(teid, tv.teidOut); diff != "" {
		//	t.Error(diff)
		//}
		//if diff := cmp.Diff(buf[:n], tv.payload); diff != "" {
		//	t.Error(diff)
		//}
		okCh <- struct{}{}
	}(tv)

	if _, err := cliConn.WriteToGTP(tv.teidOut, httpSyn(), srvAddr); err != nil {
		t.Fatal(err)
	}
	time.Sleep(500 * time.Microsecond)
	if _, err := cliConn.WriteToGTP(tv.teidOut, httpAck(), srvAddr); err != nil {
		t.Fatal(err)
	}
	time.Sleep(500 * time.Microsecond)
	if _, err := cliConn.WriteToGTP(tv.teidOut, httpGet(), srvAddr); err != nil {
		t.Fatal(err)
	}

	select {
	case <-okCh:
		return
	case err := <-errCh:
		t.Fatal(err)
	case <-time.After(10 * time.Second):
		t.Fatal("timed out while waiting for response to come")
	}
}

func httpSyn() []byte {
	httpsyndata := []byte{0x45, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x40, 0x06, 0x51, 0xe6, 0x0a, 0x0a, 0x0c, 0x4d,
		0x0a, 0x0a, 0xd4, 0xbe,
		0xc6, 0xcb, 0x00, 0x50, 0xca, 0x32, 0x83, 0x36, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x02, 0xff, 0xff,
		0xdc, 0xd7, 0x00, 0x00, 0x02, 0x04, 0x05, 0x22, 0x01, 0x03, 0x03, 0x06, 0x01, 0x01, 0x08, 0x0a,
		0x1e, 0x6a, 0x3e, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00}

	return httpsyndata
}
func httpAck() []byte {
	httpackdata := []byte{0x45, 0x00, 0x00, 0x34, 0x00, 0x00, 0x40, 0x00, 0x40, 0x06, 0x51, 0xf2, 0x0a, 0x0a, 0x0c, 0x4d,
		0x0a, 0x0a, 0xd4, 0xbe,
		0xc6, 0xcb, 0x00, 0x50, 0xca, 0x32, 0x83, 0x37, 0x93, 0x74, 0xde, 0x4c, 0x80, 0x10, 0x08, 0x06,
		0xb6, 0xfe, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x1e, 0x6a, 0x3e, 0xfe, 0x91, 0x30, 0x5a, 0x06}

	return httpackdata
}

func httpGet() []byte {
	getHttpData := []byte{0x45, 0x00, 0x02, 0x04, 0x00, 0x00, 0x40, 0x00, 0x40, 0x06, 0x50, 0x22, 0x0a, 0x0a, 0x0c, 0x4d,
		0x0a, 0x0a, 0xd4, 0xbe,
		0xc6, 0xcb, 0x00, 0x50, 0xca, 0x32, 0x83, 0x37, 0x93, 0x74, 0xde, 0x4c, 0x80, 0x18, 0x08, 0x06,
		0x94, 0xbb, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x1e, 0x6a, 0x3e, 0xff, 0x91, 0x30, 0x5a, 0x06,
		0x47, 0x45, 0x54, 0x20, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6e,
		0x74, 0x2d, 0x39, 0x63, 0x33, 0x61, 0x31, 0x65, 0x62, 0x34, 0x61, 0x32, 0x66, 0x34, 0x35, 0x63,
		0x39, 0x66, 0x33, 0x64, 0x37, 0x64, 0x64, 0x34, 0x64, 0x65, 0x30, 0x33, 0x66, 0x31, 0x34, 0x63,
		0x32, 0x65, 0x36, 0x62, 0x39, 0x32, 0x31, 0x65, 0x37, 0x35, 0x37, 0x31, 0x36, 0x38, 0x62, 0x35,
		0x39, 0x35, 0x64, 0x37, 0x66, 0x31, 0x36, 0x31, 0x62, 0x62, 0x63, 0x33, 0x32, 0x30, 0x66, 0x63,
		0x30, 0x35, 0x2e, 0x63, 0x73, 0x73, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d,
		0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x67, 0x69, 0x74, 0x2e, 0x66, 0x65, 0x69, 0x6e, 0x6e,
		0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x74,
		0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x2c, 0x2a, 0x2f, 0x2a, 0x3b, 0x71, 0x3d, 0x30, 0x2e,
		0x31, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b,
		0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
		0x65, 0x3a, 0x20, 0x5f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
		0x6f, 0x6e, 0x3d, 0x31, 0x32, 0x35, 0x35, 0x65, 0x63, 0x64, 0x36, 0x66, 0x31, 0x39, 0x31, 0x39,
		0x63, 0x33, 0x31, 0x30, 0x39, 0x38, 0x62, 0x37, 0x62, 0x35, 0x66, 0x35, 0x32, 0x63, 0x61, 0x61,
		0x62, 0x35, 0x62, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a,
		0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x4d, 0x61,
		0x63, 0x69, 0x6e, 0x74, 0x6f, 0x73, 0x68, 0x3b, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x20, 0x4d,
		0x61, 0x63, 0x20, 0x4f, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x5f, 0x31, 0x35, 0x5f, 0x34, 0x29,
		0x20, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x69, 0x74, 0x2f, 0x36, 0x30, 0x35,
		0x2e, 0x31, 0x2e, 0x31, 0x35, 0x20, 0x28, 0x4b, 0x48, 0x54, 0x4d, 0x4c, 0x2c, 0x20, 0x6c, 0x69,
		0x6b, 0x65, 0x20, 0x47, 0x65, 0x63, 0x6b, 0x6f, 0x29, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
		0x6e, 0x2f, 0x31, 0x33, 0x2e, 0x31, 0x20, 0x53, 0x61, 0x66, 0x61, 0x72, 0x69, 0x2f, 0x36, 0x30,
		0x35, 0x2e, 0x31, 0x2e, 0x31, 0x35, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x4c,
		0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x7a, 0x68, 0x2d, 0x63, 0x6e, 0x0d, 0x0a,
		0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
		0x67, 0x69, 0x74, 0x2e, 0x66, 0x65, 0x69, 0x6e, 0x6e, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75,
		0x73, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x0d, 0x0a, 0x41, 0x63,
		0x63, 0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x67,
		0x7a, 0x69, 0x70, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x0d, 0x0a, 0x0d, 0x0a}
	return getHttpData
}
